name: Build nrf52840 Family Only

on:
  push:
    branches:
      - master
      - beta
  workflow_dispatch:

jobs:
  setup:
    strategy:
      fail-fast: false
      matrix:
        arch: [nrf52840]
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        uses: actions/checkout@v4
        name: Checkout base
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install PlatformIO
        run: pip install -U platformio
      - id: jsonStep
        run: |
          if [[ "$GITHUB_HEAD_REF" == "" ]]; then
            TARGETS=$(./bin/generate_ci_matrix.py ${{matrix.arch}} extra)
          else
            TARGETS=$(./bin/generate_ci_matrix.py ${{matrix.arch}} pr)
          fi
          echo "Name: $GITHUB_REF_NAME Base: $GITHUB_BASE_REF Ref: $GITHUB_REF Targets: $TARGETS"
          echo "boards=$(jq -cn --argjson environments "$TARGETS" '$environments')" >> $GITHUB_OUTPUT
    outputs:
      boards: ${{ steps.jsonStep.outputs.boards }}

  build-nrf52:
    needs: setup
    continue-on-error: true
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board: ${{ fromJson(needs.setup.outputs.boards) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install PlatformIO
        run: pip install platformio
      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: pio-${{ runner.os }}-${{ hashFiles('**/platformio.ini') }}
          restore-keys: |
            pio-${{ runner.os }}-
      - name: Build ${{ matrix.board }}
        run: |
          platformio run -e ${{ matrix.board }}
      - name: Get version
        id: version
        run: echo "short=$(python3 ./bin/buildinfo.py long | cut -d. -f1-3)" >> $GITHUB_OUTPUT
      - name: Get short sha
        id: short_sha
        run: echo "sha=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
      - name: Rename firmware files after build
        run: |
          VERSION=${{ steps.version.outputs.short }}
          SHORT_SHA=${{ steps.short_sha.outputs.sha }}
          if [ -f .pio/build/${{ matrix.board }}/firmware.uf2 ]; then
            mv .pio/build/${{ matrix.board }}/firmware.uf2 .pio/build/${{ matrix.board }}/firmware-${{ matrix.board }}-${VERSION}.${SHORT_SHA}.uf2
          fi
          if [ -f .pio/build/${{ matrix.board }}/firmware.zip ]; then
            mv .pio/build/${{ matrix.board }}/firmware.zip .pio/build/${{ matrix.board }}/firmware-${{ matrix.board }}-${VERSION}.${SHORT_SHA}-ota.zip
          fi
      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.board }}-${{ steps.version.outputs.short }}.${{ steps.short_sha.outputs.sha }}
          path: |
            .pio/build/${{ matrix.board }}/*.uf2
            .pio/build/${{ matrix.board }}/*.zip

  gather-artifacts:
    runs-on: ubuntu-latest
    needs: [build-nrf52, setup]
    outputs:
      version: ${{ steps.version.outputs.short }}
      sha: ${{ steps.version.outputs.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download all nrf52 artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./output
          pattern: firmware-*
          merge-multiple: true
      - name: Display structure of downloaded files
        run: ls -lR ./output
      - name: List missing / failed boards
        run: |
          echo '${{ needs.setup.outputs.boards }}' > boards.json
          python3 -c "import json,glob;boards=json.load(open('boards.json'));found=[b for b in boards if glob.glob(f'output/firmware-{b}-*')];missing=[b for b in boards if b not in found];print('Boards expected:',boards);print('Boards built OK:',sorted(found));print('Boards missing (failed):',missing);open('build-summary.txt','w').write('Boards built OK: '+','.join(sorted(found))+'\\nBoards missing: '+','.join(missing)+'\\n')"
      - name: Upload build summary
        uses: actions/upload-artifact@v4
        with:
          name: build-summary-nrf52840
          path: build-summary.txt
      - name: Get release version string
        run: |
          echo "short=$(python3 ./bin/buildinfo.py long | cut -d. -f1-3)" >> $GITHUB_OUTPUT
          echo "sha=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
        id: version
      - name: Zip all nrf52840 firmware
        run: |
          zip -j -9 ./firmware-nrf52840-${{ steps.version.outputs.short }}.${{ steps.version.outputs.sha }}.zip ./output/firmware-*
      - name: Upload final nrf52840 zip
        uses: actions/upload-artifact@v4
        with:
          name: firmware-nrf52840
          path: ./firmware-nrf52840-${{ steps.version.outputs.short }}.${{ steps.version.outputs.sha }}.zip

  release-artifacts:
    runs-on: ubuntu-latest
    needs:
      - gather-artifacts
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Create release
        uses: softprops/action-gh-release@v2
        id: create_release
        with:
          prerelease: ${{ github.ref_name == 'beta' }}
          make_latest: ${{ github.ref_name == 'master' }}
          name: v${{ needs.gather-artifacts.outputs.version }}.${{ needs.gather-artifacts.outputs.sha }}
          tag_name: v${{ needs.gather-artifacts.outputs.version }}.${{ needs.gather-artifacts.outputs.sha }}
          body: Released version for ${{ github.ref_name }} branch.
      - name: Download nrf52840 firmware zip
        uses: actions/download-artifact@v4
        with:
          name: firmware-nrf52840
          path: .
      - name: Add nrf52840 firmware to GitHub Release
        if: ${{ github.ref_name == 'master' || github.ref_name == 'beta' }}
        run: |
          gh release upload v${{ needs.gather-artifacts.outputs.version }}.${{ needs.gather-artifacts.outputs.sha }} ./firmware-nrf52840-${{ needs.gather-artifacts.outputs.version }}.${{ needs.gather-artifacts.outputs.sha }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}